<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>The blog of Morten Kristensen</title>
 <link href="http://nullpointer.dk/atom.xml" rel="self"/>
 <link href="http://nullpointer.dk"/>
 <updated>2016-09-01T13:17:11+02:00</updated>
 <id>http://nullpointer.dk</id>
 <author>
   <name>Morten Kristensen</name>
   <email>msk@nullpointer.dk</email>
 </author>

 
 <entry>
   <title>Rewamped for GitHub</title>
   <link href="http://nullpointer.dk/2016/08/29/rewamped-for-github/"/>
   <updated>2016-08-29T21:44:24+02:00</updated>
   <id>http://nullpointer.dk/2016/08/29/rewamped-for-github</id>
   <content type="html">&lt;p&gt;I moved my blog to &lt;a href=&quot;https://github.com/netromdk/netromdk.github.io&quot;&gt;GitHub Pages&lt;/a&gt; using &lt;a href=&quot;https://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; as the static page generator. The
blog is still a collection of articles and ramblings about programming, security, algorithms, and
technology in general.&lt;/p&gt;

&lt;p&gt;Subsequently I’ll port the old wordpress posts here to markdown.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Proper multithreading with Qt</title>
   <link href="http://nullpointer.dk/2013/03/06/proper-multithreading-with-qt/"/>
   <updated>2013-03-06T15:13:10+01:00</updated>
   <id>http://nullpointer.dk/2013/03/06/proper-multithreading-with-qt</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;QThread&lt;/strong&gt; should be viewed as the mediator with the OS of the new thread and not as being the actual thread itself!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Don’t subclass QThread only to extend the actual thread implementation which is hardly ever necessary.&lt;/li&gt;
  &lt;li&gt;Create a QObject custom class that does what should be done and has a public slot for processing.&lt;/li&gt;
  &lt;li&gt;Create a QThread and custom instance, call &lt;code class=&quot;highlighter-rouge&quot;&gt;custom-&amp;gt;moveToThread(thread)&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Connect signals from thread to custom instance, started/finished along with &lt;code class=&quot;highlighter-rouge&quot;&gt;deleteLater()&lt;/code&gt; invocations.&lt;/li&gt;
  &lt;li&gt;Finally call &lt;code class=&quot;highlighter-rouge&quot;&gt;thread-&amp;gt;start()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;AND very important to not allocate on heap in the constructor of the custom class only on the stack. Objects can be allocated on the heap when the public slot is called, and thus the context is the new thread and not the “home thread”.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Unleashing the Power of GDB (part 2)</title>
   <link href="http://nullpointer.dk/2013/03/03/unleashing-the-power-of-gdb-part2/"/>
   <updated>2013-03-03T13:27:49+01:00</updated>
   <id>http://nullpointer.dk/2013/03/03/unleashing-the-power-of-gdb-part2</id>
   <content type="html">&lt;p&gt;The GNU Debugger&lt;a href=&quot;http://sourceware.org/gdb/current/onlinedocs/gdb/index.html#Top&quot; target=&quot;_blank&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt; is my favorite debugging tool and I personally think it’s essential for any *nix developer to know how to use it properly if you’re working with C/C++, D, Go, Obj-C, Fortran, Pascal, Modula-2 or Ada&lt;a href=&quot;http://sourceware.org/gdb/current/onlinedocs/gdb/Supported-Languages.html#Supported-Languages&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is the second part of &lt;em&gt;Unleashing the power of GDB&lt;/em&gt;. It is recommended reading the &lt;a href=&quot;/2013/02/12/unleashing-the-power-of-gdb/&quot;&gt;first part&lt;/a&gt; before proceeding. First section is about integrating GDB with Emacs, the second is about how to debug errors as they occur with common cases and the last section is about debugging without any debug symbols.&lt;/p&gt;

&lt;h4&gt;Integration with Emacs&lt;/h4&gt;
&lt;p&gt;GDB is taken to the next level when used together with my favorite editor Emacs&lt;a href=&quot;http://www.gnu.org/software/emacs/&quot; target=&quot;_blank&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt; because it adds autocompletion of commands and arguments, and easy stepping in the command history - saves a lot of time. But perhaps even more important: If the program is compiled with debugging symbols it will also load and show the source code. Thus hitting breakpoints and stepping through the program will show the placement in the source code as well.&lt;/p&gt;

&lt;p&gt;Let’s take the first snippet of code from the previous article:&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;string&amp;gt;
#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;func2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;func2 says: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;func1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;$&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;func2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;func1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And compile it:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;g++ -g -o &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;test.cpp
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Open Emacs if you didn’t use it already to save the file. Hit &lt;code class=&quot;highlighter-rouge&quot;&gt;M-x gdb &amp;lt;RET&amp;gt;&lt;/code&gt; to fire up the GDB mode. I recommend using the most recent GDB (7.5+) together with Emacs because it works better.&lt;/p&gt;

&lt;p&gt;Give the following arguments to the GDB mode:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gdb -i&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mi /path/to/program
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The current working directory is the directory of the file being edited when going into GDB mode. So if editing &lt;code class=&quot;highlighter-rouge&quot;&gt;/tmp/test.cpp&lt;/code&gt; then &lt;code class=&quot;highlighter-rouge&quot;&gt;gdb -i=mi test&lt;/code&gt; will run &lt;code class=&quot;highlighter-rouge&quot;&gt;/tmp/test&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Note that the above assumed Emacs version 24. If you are running previous versions you can use this instead:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gdb --annotate&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3 /path/to/program
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Thanks to &lt;em&gt;Paw&lt;/em&gt; for pointing that out.&lt;/p&gt;

&lt;p&gt;Let’s break at the main function:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; b main
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; r
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you see the following error while running on OSX:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Starting program: /x/y/foo
Unable to find Mach task port &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;process-id 76352: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;os/kern&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; failure &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0x5&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.
 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;please check gdb is codesigned - see taskgated&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;8&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then you might want to follow &lt;a href=&quot;http://sourceware.org/gdb/wiki/BuildingOnDarwin&quot; target=&quot;_blank&quot;&gt;these instructions&lt;/a&gt; to give GDB the necessary rights for debugging (you have to sign the GDB executable).&lt;/p&gt;

&lt;p&gt;This is how it looks with my Emacs configuration:
&lt;a href=&quot;/images/gdb-emacs.png&quot;&gt;&lt;img src=&quot;/images/gdb-emacs.png&quot; alt=&quot;GDB in Emacs&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;Inspecting actual bugs&lt;/h4&gt;
&lt;p&gt;Now I’ll show some typical programming bugs and how to spot and fix them using GDB. Suppose you have written a program but you get the following error when running it:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./prog1
segmentation fault  ./prog1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Note that the error might be displayed in various of ways. A segmentation fault happens but you will be wondering what caused it so we fire up GDB:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gdb ./prog1
Reading symbols &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;shared libraries ... &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; r
Starting program: /private/tmp/prog1 
Reading symbols &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;shared libraries ++............................. &lt;span class=&quot;k&quot;&gt;done

&lt;/span&gt;Program received signal EXC_BAD_ACCESS, Could not access memory.
Reason: KERN_INVALID_ADDRESS at address: 0x0000000000000000
0x0000000100000f27 &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;main &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1, &lt;span class=&quot;nv&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x7fff5fbffa78&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; at prog1.cpp:3
3	  &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;ptr &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; p ptr
&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;int &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 0x0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;First it is observed that we are denied access to some memory at address &lt;code class=&quot;highlighter-rouge&quot;&gt;0x0..0&lt;/code&gt; and that it’s the line &lt;code class=&quot;highlighter-rouge&quot;&gt;*ptr = 1&lt;/code&gt; (prog1.cpp:3) that caused it. So we already know from the error message that &lt;code class=&quot;highlighter-rouge&quot;&gt;ptr&lt;/code&gt; must then be a null-pointer but we double-check by inspecting it with &lt;code class=&quot;highlighter-rouge&quot;&gt;p ptr&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Another example might be the following:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./prog2
prog2&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;12673&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; malloc: &lt;span class=&quot;k&quot;&gt;***&lt;/span&gt; error &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;object 0x7ffd08c03930: pointer being freed was not allocated
&lt;span class=&quot;k&quot;&gt;***&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;a breakpoint &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;malloc_error_break to debug
abort      ./prog2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;From the error message we now know that some unallocated memory was freed. It also gives a tip on where to start debugging, so let’s do just that:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gdb ./prog2
Reading symbols &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;shared libraries ... &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; b malloc_error_break
Function &lt;span class=&quot;s2&quot;&gt;&quot;malloc_error_break&quot;&lt;/span&gt; not defined.
Make breakpoint pending on future shared library load? &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;y or &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;n]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; y
Breakpoint 1 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;malloc_error_break&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; pending.
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; r
Starting program: /private/tmp/prog2 
Reading symbols &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;shared libraries ++............................. &lt;span class=&quot;k&quot;&gt;done
&lt;/span&gt;Breakpoint 1 at 0x7fff9439b558
Pending breakpoint 1 - &lt;span class=&quot;s2&quot;&gt;&quot;malloc_error_break&quot;&lt;/span&gt; resolved
prog2&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;12693&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; malloc: &lt;span class=&quot;k&quot;&gt;***&lt;/span&gt; error &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;object 0x100103920: pointer being freed was not allocated
&lt;span class=&quot;k&quot;&gt;***&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;a breakpoint &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;malloc_error_break to debug

Breakpoint 1, 0x00007fff9439b558 &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;malloc_error_break &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; bt
&lt;span class=&quot;c&quot;&gt;#0  0x00007fff9439b558 in malloc_error_break ()&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#1  0x00007fff9439c912 in free ()&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#2  0x0000000100000f03 in main (argc=1, argv=0x7fff5fbffa78) at prog2.cpp:4&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; f 2
&lt;span class=&quot;c&quot;&gt;#2  0x0000000100000f03 in main (argc=1, argv=0x7fff5fbffa78) at prog2.cpp:4&lt;/span&gt;
4	  delete[] txt;  
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; l
1	int main&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;int argc, char &lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;argv&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
2	  char &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;txt &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; new char[128];
3	  delete[] txt;
4	  delete[] txt;  
5	  &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;0;
6	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So we set a pending breakpoint, start the program, find the frame and observe the double &lt;code class=&quot;highlighter-rouge&quot;&gt;delete[]&lt;/code&gt; on line 3 and 4.&lt;/p&gt;

&lt;p&gt;A third possibility is a floating point exception:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./prog3
floating point exception  ./prog3
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Using GDB we immediately see the problem:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gdb ./prog3
Reading symbols &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;shared libraries ... &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; r
Starting program: /private/tmp/prog3 
Reading symbols &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;shared libraries ++............................. &lt;span class=&quot;k&quot;&gt;done

&lt;/span&gt;Program received signal EXC_ARITHMETIC, Arithmetic exception.
0x0000000100000f38 &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;main &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1, &lt;span class=&quot;nv&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x7fff5fbffa78&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; at prog3.cpp:3
3	  &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;a / 0;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Which in this case is a division-by-zero error. Pay attention to the warnings your compiler issues to avoid these things. It might have looked like this:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;prog3.cpp:3: warning: division by zero &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; ‘a / 0’
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Note that these are just examples of runtime errors. A lot more exist that I have not covered here.&lt;/p&gt;

&lt;h4&gt;Debugging with no debugging symbols&lt;/h4&gt;
&lt;p&gt;Sometimes the program you are debugging has no symbol table and you still have to locate the problem. It might be that you are debugging a third party binary so you don’t have access to the source code. &lt;b&gt;This section will be a bit advanced.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Let’s start with the first problematic program from last section: &lt;code class=&quot;highlighter-rouge&quot;&gt;prog1&lt;/code&gt;. This is what GDB tells us with no debug symbols:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gdb ./prog1
Reading symbols &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;shared libraries ... &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; r
Starting program: /private/tmp/prog1 
Reading symbols &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;shared libraries ++............................. &lt;span class=&quot;k&quot;&gt;done

&lt;/span&gt;Program received signal EXC_BAD_ACCESS, Could not access memory.
Reason: KERN_INVALID_ADDRESS at address: 0x0000000000000000
0x0000000100000f27 &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;main &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Unfortunately we cannot inspect the source code but instead we can inspect the machine code by disassembling a section of memory into symbolic language:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; disas
Dump of assembler code &lt;span class=&quot;k&quot;&gt;for function &lt;/span&gt;main:
0x0000000100000f10 &amp;lt;main+0&amp;gt;:	push   %rbp
0x0000000100000f11 &amp;lt;main+1&amp;gt;:	mov    %rsp,%rbp
0x0000000100000f14 &amp;lt;main+4&amp;gt;:	mov    %edi,-0x4&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;%rbp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
0x0000000100000f17 &amp;lt;main+7&amp;gt;:	mov    %rsi,-0x10&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;%rbp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
0x0000000100000f1b &amp;lt;main+11&amp;gt;:	movq   &lt;span class=&quot;nv&quot;&gt;$0x0&lt;/span&gt;,-0x20&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;%rbp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
0x0000000100000f23 &amp;lt;main+19&amp;gt;:	mov    -0x20&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;%rbp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,%rax
0x0000000100000f27 &amp;lt;main+23&amp;gt;:	movl   &lt;span class=&quot;nv&quot;&gt;$0x1&lt;/span&gt;,&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;%rax&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
0x0000000100000f2d &amp;lt;main+29&amp;gt;:	movl   &lt;span class=&quot;nv&quot;&gt;$0x0&lt;/span&gt;,-0x18&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;%rbp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
0x0000000100000f34 &amp;lt;main+36&amp;gt;:	mov    -0x18&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;%rbp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,%eax
0x0000000100000f37 &amp;lt;main+39&amp;gt;:	mov    %eax,-0x14&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;%rbp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
0x0000000100000f3a &amp;lt;main+42&amp;gt;:	mov    -0x14&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;%rbp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,%eax
0x0000000100000f3d &amp;lt;main+45&amp;gt;:	pop    %rbp
0x0000000100000f3e &amp;lt;main+46&amp;gt;:	retq   
End of assembler dump.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Let us focus around the reported address &lt;code class=&quot;highlighter-rouge&quot;&gt;0x0000000100000f27&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; disas 0x0000000100000f1b 0x0000000100000f2d
Dump of assembler code from 0x100000f1b to 0x100000f2d:
0x0000000100000f1b &amp;lt;main+11&amp;gt;:	movq   &lt;span class=&quot;nv&quot;&gt;$0x0&lt;/span&gt;,-0x20&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;%rbp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
0x0000000100000f23 &amp;lt;main+19&amp;gt;:	mov    -0x20&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;%rbp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,%rax
0x0000000100000f27 &amp;lt;main+23&amp;gt;:	movl   &lt;span class=&quot;nv&quot;&gt;$0x1&lt;/span&gt;,&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;%rax&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
End of assembler dump.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;On the third line the pointer is accessed and &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; is attempted saved at the location. So this information can be given to the third party. However, we actually know the source code so I’ll show the parallels:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;movq   &lt;span class=&quot;nv&quot;&gt;$0x0&lt;/span&gt;,-0x20&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;%rbp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;            int &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;ptr &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0;
mov    -0x20&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;%rbp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,%rax            // Put addr 0 &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; %rax
movl   &lt;span class=&quot;nv&quot;&gt;$0x1&lt;/span&gt;,&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;%rax&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;                 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;ptr &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;On the first line &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; is saved at &lt;code class=&quot;highlighter-rouge&quot;&gt;-0x20(%rbp)&lt;/code&gt;, line two moves the address (&lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;) to &lt;code class=&quot;highlighter-rouge&quot;&gt;%rax&lt;/code&gt; and the third line tries to dereference the null-pointer and assign &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; to it.&lt;/p&gt;

&lt;p&gt;Let us try to do the same thing for &lt;code class=&quot;highlighter-rouge&quot;&gt;prog2&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gdb ./prog2
Reading symbols &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;shared libraries ... &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; b malloc_error_break
Function &lt;span class=&quot;s2&quot;&gt;&quot;malloc_error_break&quot;&lt;/span&gt; not defined.
Make breakpoint pending on future shared library load? &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;y or &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;n]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; y
Breakpoint 1 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;malloc_error_break&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; pending.
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; r
Starting program: /private/tmp/prog2 
Reading symbols &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;shared libraries ++............................. &lt;span class=&quot;k&quot;&gt;done
&lt;/span&gt;Breakpoint 1 at 0x7fff9439b558
Pending breakpoint 1 - &lt;span class=&quot;s2&quot;&gt;&quot;malloc_error_break&quot;&lt;/span&gt; resolved
prog2&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;15026&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; malloc: &lt;span class=&quot;k&quot;&gt;***&lt;/span&gt; error &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;object 0x100103920: pointer being freed was not allocated
&lt;span class=&quot;k&quot;&gt;***&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;a breakpoint &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;malloc_error_break to debug

Breakpoint 1, 0x00007fff9439b558 &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;malloc_error_break &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; bt
&lt;span class=&quot;c&quot;&gt;#0  0x00007fff9439b558 in malloc_error_break ()&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#1  0x00007fff9439c912 in free ()&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#2  0x0000000100000f03 in main ()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The exception arises on address &lt;code class=&quot;highlighter-rouge&quot;&gt;0x0000000100000f03&lt;/code&gt;, so again we have to disassemble to make sense of it:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; disas
Dump of assembler code &lt;span class=&quot;k&quot;&gt;for function &lt;/span&gt;main:
0x0000000100000eb0 &amp;lt;main+0&amp;gt;:	push   %rbp
0x0000000100000eb1 &amp;lt;main+1&amp;gt;:	mov    %rsp,%rbp
0x0000000100000eb4 &amp;lt;main+4&amp;gt;:	sub    &lt;span class=&quot;nv&quot;&gt;$0x20&lt;/span&gt;,%rsp
0x0000000100000eb8 &amp;lt;main+8&amp;gt;:	mov    %edi,%eax
0x0000000100000eba &amp;lt;main+10&amp;gt;:	mov    %eax,-0x4&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;%rbp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
0x0000000100000ebd &amp;lt;main+13&amp;gt;:	mov    %rsi,-0x10&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;%rbp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
0x0000000100000ec1 &amp;lt;main+17&amp;gt;:	mov    &lt;span class=&quot;nv&quot;&gt;$0x80&lt;/span&gt;,%rax
0x0000000100000ecb &amp;lt;main+27&amp;gt;:	mov    %rax,%rdi
0x0000000100000ece &amp;lt;main+30&amp;gt;:	callq  0x100000f20 &amp;lt;dyld_stub__Znam&amp;gt;
0x0000000100000ed3 &amp;lt;main+35&amp;gt;:	mov    %rax,-0x20&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;%rbp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
0x0000000100000ed7 &amp;lt;main+39&amp;gt;:	mov    -0x20&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;%rbp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,%rax
0x0000000100000edb &amp;lt;main+43&amp;gt;:	cmp    &lt;span class=&quot;nv&quot;&gt;$0x0&lt;/span&gt;,%rax
0x0000000100000edf &amp;lt;main+47&amp;gt;:	je     0x100000eed &amp;lt;main+61&amp;gt;
0x0000000100000ee1 &amp;lt;main+49&amp;gt;:	mov    -0x20&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;%rbp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,%rax
0x0000000100000ee5 &amp;lt;main+53&amp;gt;:	mov    %rax,%rdi
0x0000000100000ee8 &amp;lt;main+56&amp;gt;:	callq  0x100000f1a &amp;lt;dyld_stub__ZdaPv&amp;gt;
0x0000000100000eed &amp;lt;main+61&amp;gt;:	mov    -0x20&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;%rbp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,%rax
0x0000000100000ef1 &amp;lt;main+65&amp;gt;:	cmp    &lt;span class=&quot;nv&quot;&gt;$0x0&lt;/span&gt;,%rax
0x0000000100000ef5 &amp;lt;main+69&amp;gt;:	je     0x100000f03 &amp;lt;main+83&amp;gt;
0x0000000100000ef7 &amp;lt;main+71&amp;gt;:	mov    -0x20&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;%rbp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,%rax
0x0000000100000efb &amp;lt;main+75&amp;gt;:	mov    %rax,%rdi
0x0000000100000efe &amp;lt;main+78&amp;gt;:	callq  0x100000f1a &amp;lt;dyld_stub__ZdaPv&amp;gt;
0x0000000100000f03 &amp;lt;main+83&amp;gt;:	movl   &lt;span class=&quot;nv&quot;&gt;$0x0&lt;/span&gt;,-0x18&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;%rbp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
0x0000000100000f0a &amp;lt;main+90&amp;gt;:	mov    -0x18&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;%rbp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,%eax
0x0000000100000f0d &amp;lt;main+93&amp;gt;:	mov    %eax,-0x14&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;%rbp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
0x0000000100000f10 &amp;lt;main+96&amp;gt;:	mov    -0x14&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;%rbp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,%eax
0x0000000100000f13 &amp;lt;main+99&amp;gt;:	add    &lt;span class=&quot;nv&quot;&gt;$0x20&lt;/span&gt;,%rsp
0x0000000100000f17 &amp;lt;main+103&amp;gt;:	pop    %rbp
0x0000000100000f18 &amp;lt;main+104&amp;gt;:	retq   
End of assembler dump.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is a large chunk but I will point out the important little details. The following line calls &lt;code class=&quot;highlighter-rouge&quot;&gt;new[]&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0x0000000100000ece &amp;lt;main+30&amp;gt;:	callq  0x100000f20 &amp;lt;dyld_stub__Znam&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The reason is that &lt;code class=&quot;highlighter-rouge&quot;&gt;_Znam&lt;/code&gt; actually means &lt;code class=&quot;highlighter-rouge&quot;&gt;operator new[](unsigned long)&lt;/code&gt;. &lt;em&gt;You can use the tool &lt;code class=&quot;highlighter-rouge&quot;&gt;c++filt&lt;/code&gt; or &lt;a href=&quot;http://slush.warosu.org/c++filtjs/&quot; target=&quot;_blank&quot;&gt;this site&lt;/a&gt; to do demangle symbols.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And here are the double deletions:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0x0000000100000ee8 &amp;lt;main+56&amp;gt;:	callq  0x100000f1a &amp;lt;dyld_stub__ZdaPv&amp;gt;
0x0000000100000efe &amp;lt;main+78&amp;gt;:	callq  0x100000f1a &amp;lt;dyld_stub__ZdaPv&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_ZdaPv&lt;/code&gt; means &lt;code class=&quot;highlighter-rouge&quot;&gt;operator delete[](void*)&lt;/code&gt;. In both cases they are passed the same address by the following instructions:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0x0000000100000ee1 &amp;lt;main+49&amp;gt;:	mov    -0x20&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;%rbp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,%rax
0x0000000100000ee5 &amp;lt;main+53&amp;gt;:	mov    %rax,%rdi
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And here as well:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0x0000000100000ef7 &amp;lt;main+71&amp;gt;:	mov    -0x20&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;%rbp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,%rax
0x0000000100000efb &amp;lt;main+75&amp;gt;:	mov    %rax,%rdi
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The third program with the floating-point exception is debugged in the following way without symbols:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gdb ./prog3
Reading symbols &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;shared libraries ... &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; r
Starting program: /private/tmp/prog3 
Reading symbols &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;shared libraries ++............................. &lt;span class=&quot;k&quot;&gt;done

&lt;/span&gt;Program received signal EXC_ARITHMETIC, Arithmetic exception.
0x0000000100000f38 &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;main &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Once again it is necessary to disassemble:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; disas
Dump of assembler code &lt;span class=&quot;k&quot;&gt;for function &lt;/span&gt;main:
0x0000000100000f20 &amp;lt;main+0&amp;gt;:	push   %rbp
0x0000000100000f21 &amp;lt;main+1&amp;gt;:	mov    %rsp,%rbp
0x0000000100000f24 &amp;lt;main+4&amp;gt;:	mov    %edi,-0x4&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;%rbp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
0x0000000100000f27 &amp;lt;main+7&amp;gt;:	mov    %rsi,-0x10&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;%rbp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
0x0000000100000f2b &amp;lt;main+11&amp;gt;:	movl   &lt;span class=&quot;nv&quot;&gt;$0xff&lt;/span&gt;,-0x1c&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;%rbp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
0x0000000100000f32 &amp;lt;main+18&amp;gt;:	mov    -0x1c&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;%rbp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,%eax
0x0000000100000f35 &amp;lt;main+21&amp;gt;:	xor    %ecx,%ecx
0x0000000100000f37 &amp;lt;main+23&amp;gt;:	cltd   
0x0000000100000f38 &amp;lt;main+24&amp;gt;:	idiv   %ecx
0x0000000100000f3a &amp;lt;main+26&amp;gt;:	mov    %eax,-0x18&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;%rbp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
0x0000000100000f3d &amp;lt;main+29&amp;gt;:	mov    %eax,-0x14&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;%rbp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
0x0000000100000f40 &amp;lt;main+32&amp;gt;:	mov    -0x14&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;%rbp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,%eax
0x0000000100000f43 &amp;lt;main+35&amp;gt;:	pop    %rbp
0x0000000100000f44 &amp;lt;main+36&amp;gt;:	retq   
End of assembler dump.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The interesting lines are these with the exception happening on the last line:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0x0000000100000f2b &amp;lt;main+11&amp;gt;:	movl   &lt;span class=&quot;nv&quot;&gt;$0xff&lt;/span&gt;,-0x1c&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;%rbp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
0x0000000100000f32 &amp;lt;main+18&amp;gt;:	mov    -0x1c&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;%rbp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,%eax
0x0000000100000f35 &amp;lt;main+21&amp;gt;:	xor    %ecx,%ecx
0x0000000100000f37 &amp;lt;main+23&amp;gt;:	cltd   
0x0000000100000f38 &amp;lt;main+24&amp;gt;:	idiv   %ecx
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This basically does the operation &lt;code class=&quot;highlighter-rouge&quot;&gt;0xFF / 0&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;0xFF&lt;/code&gt; is saved to &lt;code class=&quot;highlighter-rouge&quot;&gt;-0x1c(%rbp)&lt;/code&gt; and moved to &lt;code class=&quot;highlighter-rouge&quot;&gt;%eax&lt;/code&gt;, then &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; is “created” by doing an XOR on &lt;code class=&quot;highlighter-rouge&quot;&gt;%ecx&lt;/code&gt; with itself (recall that XOR on two equal operands always yields &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;) and storing in &lt;code class=&quot;highlighter-rouge&quot;&gt;%ecx&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;cltd&lt;/code&gt; converts signed long word &lt;code class=&quot;highlighter-rouge&quot;&gt;%eax&lt;/code&gt; to a double word in &lt;code class=&quot;highlighter-rouge&quot;&gt;%edx:%eax&lt;/code&gt; and finally &lt;code class=&quot;highlighter-rouge&quot;&gt;idiv&lt;/code&gt; does the signed division.&lt;/p&gt;

&lt;p&gt;Stay tuned for more.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Unleashing the Power of GDB</title>
   <link href="http://nullpointer.dk/2013/02/12/unleashing-the-power-of-gdb/"/>
   <updated>2013-02-12T00:33:30+01:00</updated>
   <id>http://nullpointer.dk/2013/02/12/unleashing-the-power-of-gdb</id>
   <content type="html">&lt;p&gt;The GNU Debugger&lt;a href=&quot;http://sourceware.org/gdb/current/onlinedocs/gdb/index.html#Top&quot; target=&quot;_blank&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt; is my favorite debugging tool and I personally think it’s essential for any *nix developer to know how to use it properly if you’re working with C/C++, D, Go, Obj-C, Fortran, Pascal, Modula-2 or Ada&lt;a href=&quot;http://sourceware.org/gdb/current/onlinedocs/gdb/Supported-Languages.html#Supported-Languages&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This is the first in hopefully a series of entries about utilising GDB to its fullest.&lt;/em&gt; First a little about how to invoke GDB, secondly some basic usage of some of the most frequently used commands, how to attach to a running program and modify/redirect its &lt;code class=&quot;highlighter-rouge&quot;&gt;stdout&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;stderr&lt;/code&gt;, then how to install and use watchpoints, and finally how to manually call functions and class methods.&lt;/p&gt;

&lt;h4&gt;Invocation&lt;/h4&gt;
&lt;p&gt;Here is how to start debugging a program:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gdb ./program
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Make sure to compile your programs with debugging symbols to make source code and line numbers available while debugging. If using GCC or Clang use the &lt;code class=&quot;highlighter-rouge&quot;&gt;-g&lt;/code&gt; argument to do this.&lt;/p&gt;

&lt;p&gt;Sometimes arguments have to be passed to the program to debug:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gdb --args ./program arg1 arg2 arg3..
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4&gt;Basic usage&lt;/h4&gt;
&lt;p&gt;The basic commands to use during the debugging phase is &lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;r&lt;/code&gt;), &lt;code class=&quot;highlighter-rouge&quot;&gt;step&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt;), &lt;code class=&quot;highlighter-rouge&quot;&gt;next&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;), &lt;code class=&quot;highlighter-rouge&quot;&gt;continue&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt;), &lt;code class=&quot;highlighter-rouge&quot;&gt;frame&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt;), &lt;code class=&quot;highlighter-rouge&quot;&gt;backtrace&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;bt&lt;/code&gt;), &lt;code class=&quot;highlighter-rouge&quot;&gt;print&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;p&lt;/code&gt;), &lt;code class=&quot;highlighter-rouge&quot;&gt;info&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;), &lt;code class=&quot;highlighter-rouge&quot;&gt;break&lt;/code&gt;(&lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;), &lt;code class=&quot;highlighter-rouge&quot;&gt;lines&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;l&lt;/code&gt;), &lt;code class=&quot;highlighter-rouge&quot;&gt;help&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;h&lt;/code&gt;) and &lt;code class=&quot;highlighter-rouge&quot;&gt;quit&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;q&lt;/code&gt;).&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;&lt;strong&gt;run&lt;/strong&gt; will run the program or re-run if already started.&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;step&lt;/strong&gt; steps until the program reaches a new source code line and can be used with an integer argument to step that many times.&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;next&lt;/strong&gt; works like `step` except it will treat a function call like a single instruction. Can also be given an integer argument.&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;continue&lt;/strong&gt; will resume execution after hitting a breakpoint, for instance.&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;frame&lt;/strong&gt; can be used to select or print current stack frame. When no argument is given it will print the current stack frame, and otherwise it will select the chosen frame.&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;backtrace&lt;/strong&gt; is used to print a backtrace of all stack frames in order. When an argument is given it will print the innermost frames if positive and the outermost if negative.&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;print&lt;/strong&gt; prints the value of an expression. It could be variables in the current stack frame, globals or an entire file. As we shall see later on it can also be used to invoke system calls and more.&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;info&lt;/strong&gt; is very useful because it can display a lot of information about variables, threads, frame, registers, files, types, symbols, locals, addresses and tons more.&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;break&lt;/strong&gt; is used to set breakpoints in the program at a specified line, function or address.&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;lines&lt;/strong&gt; with no arguments shows the 10 source code lines centered at the current line. The argument can be a line number, a file with line number (FILE:LINENUM), a function, a file and function (FILE:FUNCTION) or an address (*ADDR).&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;help&lt;/strong&gt; is invaluable because it explains about more or less everything in GDB. &lt;em&gt;So use it!&lt;/em&gt;&lt;/li&gt;
	&lt;li&gt;Lastly &lt;strong&gt;quit&lt;/strong&gt; exits the program and terminates GDB.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So let’s give them a spin. Save the following code to a file named “test.cpp”:&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;string&amp;gt;
#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;func2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;func2 says: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;func1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;$&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;func2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;func1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then compile it thusly:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;g++ -g -o &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;test.cpp
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And debug it:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gdb ./test
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;First thing we will do is set a breakpoint at &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt; and run the program:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; b main
Breakpoint 1 at 0x100000c4f: file test.cpp, line 15.
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; r
Starting program: /private/tmp/test 
Reading symbols &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;shared libraries ++............................. &lt;span class=&quot;k&quot;&gt;done

&lt;/span&gt;Breakpoint 1, main &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1, &lt;span class=&quot;nv&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x7fff5fbffa80&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; at test.cpp:15
15	  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;int i &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1; i &amp;lt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 3; i++&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then we inspect the arguments of the current stack:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; f
&lt;span class=&quot;c&quot;&gt;#0  main (argc=1, argv=0x7fff5fbffa80) at test.cpp:15&lt;/span&gt;
15	  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;int i &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1; i &amp;lt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 3; i++&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; i args
argc &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
argv &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;char &lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 0x7fff5fbffa80
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; p argv
&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;char &lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 0x7fff5fbffa80
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; p &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;argv
&lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0x7fff5fbffbf8 &lt;span class=&quot;s2&quot;&gt;&quot;/private/tmp/test&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; p argv[0]
&lt;span class=&quot;nv&quot;&gt;$3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0x7fff5fbffbf8 &lt;span class=&quot;s2&quot;&gt;&quot;/private/tmp/test&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; p argv[1]
&lt;span class=&quot;nv&quot;&gt;$4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0x0
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Notice that the manipulation of the &lt;code class=&quot;highlighter-rouge&quot;&gt;argv&lt;/code&gt; array is very much like in C/C++ with deference/element access (&lt;code class=&quot;highlighter-rouge&quot;&gt;p *argv&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;p argv[1]&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Now we step one round through the &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt;-loop:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; s
16	    func1&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 5&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; s
func1 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;5&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; at test.cpp:10
10	  string str&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;i, &lt;span class=&quot;s2&quot;&gt;&quot;$&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; s
11	  func2&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;str&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; s
func2 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;@0x7fff5fbffa00&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; at test.cpp:6
6	  cout &amp;lt;&amp;lt; &lt;span class=&quot;s2&quot;&gt;&quot;func2 says: &quot;&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&amp;lt;&amp;lt; str &amp;lt;&amp;lt; endl;
(gdb) s
func2 says: $$$$$
7	}
(gdb) s
func1 (i=5) at test.cpp:12
12	}
(gdb) s
0x0000000100000bee	11	  func2(str);
(gdb) s
main (argc=1, argv=0x7fff5fbffa80) at test.cpp:15
15	  for (int i = 1; i &amp;lt;= 3; i++) {
(gdb)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;What happens is that we first call &lt;code class=&quot;highlighter-rouge&quot;&gt;func1(5)&lt;/code&gt; which in turn calls &lt;code class=&quot;highlighter-rouge&quot;&gt;func2(str)&lt;/code&gt; and returns to the &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt;-loop. If we instead used &lt;code class=&quot;highlighter-rouge&quot;&gt;next&lt;/code&gt; the output would be shorter because it would not step into &lt;code class=&quot;highlighter-rouge&quot;&gt;func1&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; n
16	    func1&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 5&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; n
func2 says: &lt;span class=&quot;nv&quot;&gt;$$$$$$$$$$&lt;/span&gt;
15	  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;int i &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1; i &amp;lt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 3; i++&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It’s time to see a backtrace in action:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; b func2
Breakpoint 2 at 0x100000abc: file test.cpp, line 6.
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; c
Continuing.

Breakpoint 2, func2 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;@0x7fff5fbffa00&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; at test.cpp:6
6	  cout &amp;lt;&amp;lt; &lt;span class=&quot;s2&quot;&gt;&quot;func2 says: &quot;&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&amp;lt;&amp;lt; str &amp;lt;&amp;lt; endl;
(gdb) bt
#0  func2 (str=@0x7fff5fbffa00) at test.cpp:6
#1  0x0000000100000b81 in func1 (i=15) at test.cpp:11
#2  0x0000000100000c65 in main (argc=1, argv=0x7fff5fbffa80) at test.cpp:16
(gdb)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The trace shows the stack frames in a numbered fashion from &lt;code class=&quot;highlighter-rouge&quot;&gt;func2&lt;/code&gt; and backwards. Let’s inspect frame &lt;code class=&quot;highlighter-rouge&quot;&gt;#1&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; f 1
&lt;span class=&quot;c&quot;&gt;#1  0x0000000100000b81 in func1 (i=15) at test.cpp:11&lt;/span&gt;
11	  func2&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;str&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; l
6	  cout &amp;lt;&amp;lt; &lt;span class=&quot;s2&quot;&gt;&quot;func2 says: &quot;&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&amp;lt;&amp;lt; str &amp;lt;&amp;lt; endl;
7	}
8	
9	void func1(int i) {
10	  string str(i, &quot;$&quot;);
11	  func2(str);
12	}
13	
14	int main(int argc, char **argv) {
15	  for (int i = 1; i &amp;lt;= 3; i++) {
(gdb)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That concludes the basics:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; q
The program is running.  Exit anyway? &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;y or n&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; y
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4&gt;Attaching live programs&lt;/h4&gt;
&lt;p&gt;GDB can attach to running programs by stating its process ID (PID):&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gdb -p PID
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here is a little trick to debug a program started by another program at runtime. It might be crucial to attach and debug “from the top” so what to do? Simply add a little sleep to leave enough time to find the PID and attach using GDB. After attaching set the needed breakpoints and &lt;code class=&quot;highlighter-rouge&quot;&gt;continue&lt;/code&gt; execution. Another way of achieving the same thing is to use:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gdb --waitfor&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;PROCNAME
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Where PROCNAME is the process name to continuously poll for until it has been launched. Note that some instructions &lt;em&gt;will&lt;/em&gt; have been executed before GDB attaches this way because polling is not exactly instant however close it might seem to be.&lt;/p&gt;

&lt;p&gt;A very useful technique is to know how to redirect &lt;code class=&quot;highlighter-rouge&quot;&gt;stdout&lt;/code&gt; (file descriptor 1) and/or &lt;code class=&quot;highlighter-rouge&quot;&gt;stderr&lt;/code&gt; (FD 2) after a program has started. We are going to exploit the fact that &lt;code class=&quot;highlighter-rouge&quot;&gt;print&lt;/code&gt; can invoke system calls like &lt;code class=&quot;highlighter-rouge&quot;&gt;dup2&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;open&lt;/code&gt; in our case. After attaching to the process do the following:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; p &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;void&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; dup2&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;int&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; open&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/tmp/out.txt&quot;&lt;/span&gt;, 0x201, 0640&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, 1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; p &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;void&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; dup2&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;int&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; open&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/tmp/err.txt&quot;&lt;/span&gt;, 0x201, 0640&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, 2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; detach
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; q
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In short it will redirect &lt;code class=&quot;highlighter-rouge&quot;&gt;stdout&lt;/code&gt; to “/tmp/stdout.txt” and &lt;code class=&quot;highlighter-rouge&quot;&gt;stderr&lt;/code&gt; to “/tmp/stderr.txt”. The
system call &lt;code class=&quot;highlighter-rouge&quot;&gt;open&lt;/code&gt; is used to open a file for writing in our case. The mode “0x201” actually means
“write only and create file if nonexistent” since &lt;code class=&quot;highlighter-rouge&quot;&gt;O_CREAT | O_WRONLY&lt;/code&gt; = 0x200 | 0x1 = 0x201 (see
the &lt;code class=&quot;highlighter-rouge&quot;&gt;fcntl.h&lt;/code&gt; header file for details). “0640” is the umask (user has RW and group has R). After
opening a file and retrieving its FD we need to redirect the device in question to it (&lt;code class=&quot;highlighter-rouge&quot;&gt;stdout&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;stderr&lt;/code&gt; in this case). This is achieved using &lt;code class=&quot;highlighter-rouge&quot;&gt;dup2&lt;/code&gt; that creates an alias to the FD, does
redirection and closes the old FD.&lt;/p&gt;

&lt;p&gt;Additionally, it’s important to cast types to enforce GDB to behave correctly. If this is not the case it could argue giving the following error message:&lt;/p&gt;

&lt;p&gt;&lt;blockquote&gt;Unable to call function &quot;open&quot; at 0x7fff906e3fe4: no return type information available.
To call this function anyway, you can cast the return type explicitly (e.g. ''print (float) fabs (3.0)'')&lt;/blockquote&gt;&lt;/p&gt;

&lt;p&gt;Another scenario would be to completely turn off output to &lt;code class=&quot;highlighter-rouge&quot;&gt;stdout&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;stderr&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; p &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;void&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; close&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; p &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;void&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; close&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; det
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; q
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here is some code for the testing the above instructions and to observe that the output is redirected or stopped:&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;120&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hello stdout&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cerr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hello stderr&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4&gt;Watchpoints&lt;/h4&gt;
&lt;p&gt;Watchpoints are useful when certain variables need to be watched using the command &lt;code class=&quot;highlighter-rouge&quot;&gt;watch&lt;/code&gt;. Whenever a watched variable is changed GDB will show the old and new value along with the stack frame. Try debugging the program from before:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; b main
Breakpoint 1 at 0x100000c4f: file test.cpp, line 15.
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; r  
Starting program: /private/tmp/test 
Reading symbols &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;shared libraries ++............................. &lt;span class=&quot;k&quot;&gt;done

&lt;/span&gt;Breakpoint 1, main &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1, &lt;span class=&quot;nv&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x7fff5fbffa80&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; at test.cpp:15
15	  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;int i &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1; i &amp;lt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 3; i++&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; watch i
Hardware watchpoint 2: i
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; d 1
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; c
Continuing.
Hardware watchpoint 2: i

Old value &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0
New value &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
0x0000000100000c56 &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;main &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1, &lt;span class=&quot;nv&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x7fff5fbffa80&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; at test.cpp:15
15	  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;int i &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1; i &amp;lt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 3; i++&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; c
Continuing.
&lt;span class=&quot;nv&quot;&gt;$$$$&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;
Hardware watchpoint 2: i

Old value &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
New value &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2
0x0000000100000c6e &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;main &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1, &lt;span class=&quot;nv&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x7fff5fbffa80&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; at test.cpp:15
15	  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;int i &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1; i &amp;lt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 3; i++&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; c
Continuing.
&lt;span class=&quot;nv&quot;&gt;$$$$$$$$$$&lt;/span&gt;
Hardware watchpoint 2: i

Old value &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2
New value &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 3
0x0000000100000c6e &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;main &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1, &lt;span class=&quot;nv&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x7fff5fbffa80&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; at test.cpp:15
15	  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;int i &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1; i &amp;lt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 3; i++&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; c
Continuing.
&lt;span class=&quot;nv&quot;&gt;$$$$$$$$$$$$$$&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;
Hardware watchpoint 2: i

Old value &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 3
New value &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 4
0x0000000100000c6e &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;main &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1, &lt;span class=&quot;nv&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x7fff5fbffa80&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; at test.cpp:15
15	  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;int i &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1; i &amp;lt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 3; i++&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; c
Continuing.

Watchpoint 2 deleted because the program has left the block &lt;span class=&quot;k&quot;&gt;in
&lt;/span&gt;which its expression is valid.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Notice I did &lt;code class=&quot;highlighter-rouge&quot;&gt;d 1&lt;/code&gt; which means to delete the breakpoint with number “1”.&lt;/p&gt;

&lt;h4&gt;Calling functions&lt;/h4&gt;
&lt;p&gt;While debugging it is possible to call functions of the program - even pass them arguments - and have the result saved in value history if non-void. Load the first test program from above in GDB:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; b 11
Breakpoint 1 at 0x100000b45: file test.cpp, line 11.
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; r
Starting program: /private/tmp/test 
Reading symbols &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;shared libraries ++............................. &lt;span class=&quot;k&quot;&gt;done

&lt;/span&gt;Breakpoint 1, func1 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;5&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; at test.cpp:11
11	  func2&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;str&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; i loc   
str &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  _M_dataplus &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &amp;lt;std::allocator&amp;lt;char&amp;gt;&amp;gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &amp;lt;__gnu_cxx::new_allocator&amp;lt;char&amp;gt;&amp;gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&amp;lt;No data fields&amp;gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;, &amp;lt;No data fields&amp;gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;, 
    members of std::string::_Alloc_hider: 
    _M_p &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0x100103938 &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$$$$&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;$&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; call func2&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;str&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
func2 says: &lt;span class=&quot;nv&quot;&gt;$$$$&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; q
The program is running.  Exit anyway? &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;y or n&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; y
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Since we already have a &lt;code class=&quot;highlighter-rouge&quot;&gt;std::string&lt;/code&gt; object we can call &lt;code class=&quot;highlighter-rouge&quot;&gt;func2(str)&lt;/code&gt; manually.&lt;/p&gt;

&lt;p&gt;This functionality opens up for a variety of different uses. One is to use predefined debugging functions to display custom data structures that GDB doesn’t know about. Take the &lt;code class=&quot;highlighter-rouge&quot;&gt;std::string&lt;/code&gt; structure above for &lt;code class=&quot;highlighter-rouge&quot;&gt;str&lt;/code&gt; - it’s not very descriptive except for the fact that its content is visible (&lt;code class=&quot;highlighter-rouge&quot;&gt;_M_p = 0x100103938 &quot;$$$$$&quot;&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Compile and load up the following program in GDB:&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;string&amp;gt;
#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Test&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dbg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;a = &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;b = &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;c = &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;str = &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Test&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then it’s high time to compare the two approaches:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; b main
Breakpoint 1 at 0x100000b31: file custom.cpp, line 21.
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; r
Starting program: /private/tmp/custom 
Reading symbols &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;shared libraries ++............................. &lt;span class=&quot;k&quot;&gt;done

&lt;/span&gt;Breakpoint 1, main &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1, &lt;span class=&quot;nv&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x7fff5fbffa78&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; at custom.cpp:21
21	  Test &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; n
22	  &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;0;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; call dbg&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
a &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
b &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2
c &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 3
str &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Hello, World!
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; p &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  a &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1, 
  b &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2, 
  c &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 3, 
  str &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    _M_dataplus &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &amp;lt;std::allocator&amp;lt;char&amp;gt;&amp;gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &amp;lt;__gnu_cxx::new_allocator&amp;lt;char&amp;gt;&amp;gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&amp;lt;No data fields&amp;gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;, &amp;lt;No data fields&amp;gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;, 
      members of std::string::_Alloc_hider: 
      _M_p &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0x100103938 &lt;span class=&quot;s2&quot;&gt;&quot;Hello, World!&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Keep in mind that this is just a simple test. The great thing about this is that you can fine-tune the debugging function to show only what you need to see and leave out the unnecessary parts. &lt;em&gt;And make sure the variables you’re accessing are actually live and initialised when doing so!&lt;/em&gt; If we skip the &lt;code class=&quot;highlighter-rouge&quot;&gt;next&lt;/code&gt; command above this is the result:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; call dbg&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
a &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0
b &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0
c &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0

Program received signal EXC_BAD_ACCESS, Could not access memory.
Reason: KERN_INVALID_ADDRESS at address: 0xffffffffffffffe8
0x00007fff8fa68c85 &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;std::operator&amp;lt;&amp;lt; &amp;lt;char, std::char_traits&amp;lt;char&amp;gt;, std::allocator&amp;lt;char&amp;gt; &amp;gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It is also possible to call class methods. Add the following snippet after the constructor on line 7 in the previous code:&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__attribute__&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;used&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;str = &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Notice the use of the “used” attribute - this is because if the method is not called in the source code, which is the case here, the compiler will optimise the whole thing away in most cases.&lt;/p&gt;

&lt;p&gt;Invoking the method on our &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt; object is easy:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; call test.dump&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
str &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Hello, World!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That concludes the basic knowledge needed to start debugging using GDB. Stay tuned for more!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>sed tricks</title>
   <link href="http://nullpointer.dk/2013/02/09/sed-tricks/"/>
   <updated>2013-02-09T15:05:04+01:00</updated>
   <id>http://nullpointer.dk/2013/02/09/sed-tricks</id>
   <content type="html">&lt;p&gt;The &lt;strong&gt;s&lt;/strong&gt;tream &lt;strong&gt;ed&lt;/strong&gt;itor, most commonly know as &lt;b&gt;sed&lt;/b&gt;, is a wonderful tool for modifying data from files and stdin. &lt;em&gt;In this article I will be using the BSD variant of sed which is a little bit different from the GNU variant of sed but I will try to point out where the differences are in my examples.&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;Usage&lt;/h4&gt;
&lt;p&gt;One of the most common ways of using sed is:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat file.txt | sed COMMAND
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And the other&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sed COMMAND FILE
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It is possible to have multiple commands using the &lt;code class=&quot;highlighter-rouge&quot;&gt;-e&lt;/code&gt; argument:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sed -e COMMAND -e COMMAND ..
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Or even like this:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sed &lt;span class=&quot;s1&quot;&gt;'COMMAND;COMMAND;..'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;em&gt;COMMAND&lt;/em&gt; can be a lot of different things but usually it will be the substitution pattern: &lt;code class=&quot;highlighter-rouge&quot;&gt;s/regular expression/replacement/flags&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here is an example:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;aabb&quot;&lt;/span&gt; | sed -e &lt;span class=&quot;s1&quot;&gt;'s/a/A/'&lt;/span&gt; -e &lt;span class=&quot;s1&quot;&gt;'s/b/B/g'&lt;/span&gt;
AaBB
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Notice that the first command is only run on the first occurrence and the second is run on all using the &lt;code class=&quot;highlighter-rouge&quot;&gt;g&lt;/code&gt; flag. Keep in mind that it works on a &lt;em&gt;line-by-line&lt;/em&gt; basis.&lt;/p&gt;

&lt;p&gt;Another important aspect is &lt;em&gt;in-place&lt;/em&gt; alteration of files:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sed -i &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;EXT&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; COMMAND FILE
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This command will edit FILE using COMMAND and if the extension EXT is given then a backup is saved to the FILE with EXT appended to the filename. It is generally recommended to produce backup files so nothing is lost unintentionally.&lt;/p&gt;

&lt;h4&gt;Group matching&lt;/h4&gt;
&lt;p&gt;Often it is necessary to match some block of data and substitute some portions without removing other parts, or to alter the order of blocks. A group is matched using parentheses in the command and referenced with &lt;code class=&quot;highlighter-rouge&quot;&gt;\\1&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;\\2&lt;/code&gt;.. etc., for instance:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;foobar&quot;&lt;/span&gt; | sed &lt;span class=&quot;s1&quot;&gt;'s/\\(foo\\)\\(bar\\)/\\2\\1/'&lt;/span&gt;
barfoo
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Two groups are matched (“foo” and “bar”) and their order is reversed. Notice that the parentheses have to be escaped in order to prevent matching the actual characters “(“ and “)”.&lt;/p&gt;

&lt;h4&gt;Extended regular expressions&lt;/h4&gt;
&lt;p&gt;The expressions I have used up until now were basic regular expressions but a more powerful variant exists, namely the extended regular expressions. In this mode, along with a lot of stuff, it’s not necessary to escape parentheses and the POSIX character sets are available. Example:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;foo &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;t bar&quot;&lt;/span&gt; | sed -E &lt;span class=&quot;s1&quot;&gt;'s/(foo)[[:space:]]*(bar)/\\2 \\1/'&lt;/span&gt;
bar foo
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The character set &lt;code class=&quot;highlighter-rouge&quot;&gt;[:space:]&lt;/code&gt; matches any whitespace character. &lt;b&gt;&lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-E&lt;/code&gt; is replaced with &lt;code class=&quot;highlighter-rouge&quot;&gt;-r&lt;/code&gt; in GNU sed.&lt;/em&gt;&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.grymoire.com/Unix/Regular.html&quot; target=&quot;_blank&quot;&gt;Here&lt;/a&gt; is a great reference of the different regular expressions, both basic and extended ones.&lt;/p&gt;

&lt;h4&gt;Case sensitivity&lt;/h4&gt;
&lt;p&gt;In GNU sed there is a flag to turn off case sensitivity, namely the “i” flag. Sadly this flag is not available in BSD sed so one has to turn to other possibilities. One is to decapitalize all letters before piping to sed, but that doesn’t work for files and in-place modifications. However, case can be ignored when using character sets and similar constructs so keep that in mind, i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;[:alpha:]&lt;/code&gt; will match “A” as well as “a”. Selective parts of a regular expression can sometimes require specific characters so if one wants to match both cases it can be done using ranges, like &lt;code class=&quot;highlighter-rouge&quot;&gt;[a-cA-C]&lt;/code&gt; for instance.&lt;/p&gt;

&lt;p&gt;Different approaches exist for decapitalizing using pipes. Here is one using &lt;code class=&quot;highlighter-rouge&quot;&gt;tr&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello, World&quot;&lt;/span&gt; | tr &lt;span class=&quot;s1&quot;&gt;'[:upper:]'&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'[:lower:]'&lt;/span&gt;
hello, world
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And here is one using &lt;code class=&quot;highlighter-rouge&quot;&gt;awk&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello, World&quot;&lt;/span&gt; | awk &lt;span class=&quot;s1&quot;&gt;'{print tolower($0)}'&lt;/span&gt;
hello, world
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If all else fails Perl has a sed-like substitution syntax  that accepts the “i” flag:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;HeLlo&quot;&lt;/span&gt; | perl -pe &lt;span class=&quot;s1&quot;&gt;'s/l/./ig'&lt;/span&gt;
He..o
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4&gt;Greedy vs non-greedy matching&lt;/h4&gt;
&lt;p&gt;sed is greedy by default, meaning it will try to match as much as possible when using &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;. Here’s a greedy example:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;aaa(bbb)aaa(bbb)aaa&quot;&lt;/span&gt; | sed -E &lt;span class=&quot;s1&quot;&gt;'s/\\(.*\\)/./'&lt;/span&gt;
aaa.aaa
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The above matches a “(“ then anything greedily until next “)”. Suppose we wanted to only match the first “(bbb)” and not “(bbb)aaa(bbb)”, then we could do the following:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;aaa(bbb)aaa(bbb)aaa&quot;&lt;/span&gt; | sed -E &lt;span class=&quot;s1&quot;&gt;'s/\\([^\\(]*\\)/./'&lt;/span&gt;
aaa.aaa&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;bbb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;aaa
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;As before it matches a “(“ then matching non-greedily for “(“ (meaning &lt;em&gt;not&lt;/em&gt; matching a “(“) until we match the closing “)”.&lt;/p&gt;

&lt;h4&gt;Examples&lt;/h4&gt;
&lt;p&gt;A friend of mine recently asked me how to replace entries of the form “&amp;lt;email address&amp;gt;” with “&amp;lt;–removed–&amp;gt;” using sed. The following was the solution:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat file.txt | sed -E &lt;span class=&quot;s1&quot;&gt;'s/(&amp;lt;).*@.*(&amp;gt;)/\\1--removed--\\2/g'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;It’s not a correct regexp for matching email addresses but given the knowledge of the presence of &amp;lt;, &amp;gt; and @ it was fitting in his scenario.&lt;/p&gt;

&lt;p&gt;The proper way of doing it would be the following:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat file.txt | sed -E &lt;span class=&quot;s1&quot;&gt;'s/(&amp;lt;)[[:alpha:][:digit:]\\._%\\+-]+@[[:alpha:][:digit:]\\.-]+\\.[[:alpha:]]{2,4}(&amp;gt;)/\\1--removed--\\2/g'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Another useful thing is to escape spaces in filenames and use them with commands:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; | sed &lt;span class=&quot;s1&quot;&gt;'s/ /\\\\\\\\ /g'&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;eval echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Listing &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;eval &lt;/span&gt;ls -l &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I used &lt;em&gt;double-escaped backslashes&lt;/em&gt; because the final output should be, for instance, “/test\ one\ seven/foobar.txt” and not “/test one seven/foobar.txt” so that the commands can interpret the paths correctly (using the &lt;code class=&quot;highlighter-rouge&quot;&gt;eval&lt;/code&gt; command). The effect is that the script can be called with both an escaped or non-escaped path, i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;/test one seven&quot;&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;/test\\ one\\ seven&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When creating a Linux distribution of a program or similar that is required to run off-the-bat, and where the source code might not be available, it is often needed to get all the shared library dependencies of certain binary files. The following script will copy these to the destination directory: &lt;b&gt;(Linux only!)&lt;/b&gt;&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Usage: getshared.sh &amp;lt;binary&amp;gt; &amp;lt;dest directory&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;BIN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; | sed &lt;span class=&quot;s1&quot;&gt;'s/ /\\\\\\\\ /g'&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;DST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt; | sed &lt;span class=&quot;s1&quot;&gt;'s/ /\\\\\\\\ /g'&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;eval &lt;/span&gt;mkdir -p &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DST&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;eval &lt;/span&gt;ldd &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BIN&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; | grep &lt;span class=&quot;s2&quot;&gt;&quot;=&amp;gt;&quot;&lt;/span&gt; | sed &lt;span class=&quot;s1&quot;&gt;'s/.*\\s*=&amp;gt;\\s*\\(.*\\)(.*)/\\1/'&lt;/span&gt; | awk &lt;span class=&quot;s1&quot;&gt;'{print $1};'&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;eval &lt;/span&gt;xargs -I&lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; cp -vuL &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DST&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here the sed command retrieves the dependency library from the output using the &lt;code class=&quot;highlighter-rouge&quot;&gt;\\1&lt;/code&gt; group. A sample line from &lt;code class=&quot;highlighter-rouge&quot;&gt;ldd&lt;/code&gt; could be&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;libc.so.6 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt; /usr/x86_64-linux-gnu/libc.so.6 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0x00007f6eb8c000&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Assume we have a file we want to modify in-place, like an INI configuration file like this:&lt;/p&gt;

&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[Section]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;enableStuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;false  &lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;someVar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1337&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;enableOther&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;dontTouchThis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wicked&quot;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;oldSchool:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And let’s say we wanted to replace all instances of “false” with “true”:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sed -i .bck -E &lt;span class=&quot;s1&quot;&gt;'s/([[:alnum:]]+)[^\\s]*([=:])[^\\s]*false/\\1\\2true/'&lt;/span&gt; conf.ini
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You will get the following result in &lt;code class=&quot;highlighter-rouge&quot;&gt;conf.ini&lt;/code&gt; (along with the backup in &lt;code class=&quot;highlighter-rouge&quot;&gt;conf.ini.bck&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[Section]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;enableStuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;true  &lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;someVar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1337&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;enableOther&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;dontTouchThis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wicked&quot;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;oldSchool:true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Notice that I remove all whitespace and that I allow both “=” and “:” as the delimiter because some implementations use “:” however uncommon it may be.&lt;/p&gt;

&lt;p&gt;That concludes my tips and tricks using sed.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Upgrading to Xcode 4.4 or later</title>
   <link href="http://nullpointer.dk/2013/02/03/upgrading-to-xcode-4.4-or-later/"/>
   <updated>2013-02-03T21:13:56+01:00</updated>
   <id>http://nullpointer.dk/2013/02/03/upgrading-to-xcode-4.4-or-later</id>
   <content type="html">&lt;p&gt;Xcode moved to the App Store as of version 4.4 and it had certain consequences to the common programmer. First of all, the SDKs are no longer located at “/Developer/SDKs” like they were before. The app is located at “/Applications/Xcode.app” on a default install and it contains the SDKs in the directory:&lt;/p&gt;

&lt;p&gt;&lt;blockquote&gt;/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs&lt;/blockquote&gt;&lt;/p&gt;

&lt;p&gt;All command-line tools are no longer installed per default either so in order to install them open Xcode, go to “Preferences”, select the “Downloads”, choose “Components” and install “Command Line Tools”.&lt;/p&gt;

&lt;p&gt;In order to configure the BSD tools correctly it is needed to instruct where Xcode is installed. It is done like this:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xcode-select --switch /Applications/Xcode.app/Contents/Developer
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Another important change of Xcode 4.4+ is the discontinuation of the 10.6 SDK. When installing, or updating, 4.4+ it will only have SDKs 10.7 and 10.8. If 10.6 is installed it will be &lt;em&gt;removed&lt;/em&gt;. So if you have 4.3 or earlier installed I recommend that you backup 10.6 if you need it for development. The SDK contains a lot of symbolic links so it’s important to &lt;i&gt;not&lt;/i&gt; follow them:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;zip -r9 --symlink /path/to/store/sdk-10.6.zip /Developer/SDKs/MacOSX10.6.sdk
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you don’t have SDK 10.6 and want it you can follow these steps:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Go to &lt;a href=&quot;https://developer.apple.com/downloads/index.action&quot; title=&quot;https://developer.apple.com/downloads/index.action&quot; target=&quot;_blank&quot;&gt;https://developer.apple.com/downloads/index.action&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;You have to login which thus requires an Apple Developer account.&lt;/li&gt;
	&lt;li&gt;Filter the search with &quot;Xcode 4 and iOS SDK 4.3&quot;.&lt;/li&gt;
	&lt;li&gt;Download &quot;Xcode 4 and iOS SDK 4.3 - Final&quot; DMG (4.28 GB).&lt;/li&gt;
	&lt;li&gt;Open the DMG to mount it and go to &quot;/Volumes/Xcode and iOS SDK/Packages&quot;.&lt;/li&gt;
	&lt;li&gt;You will find the file &quot;MacOSX10.6.pkg&quot; there which contains the SDK.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I personally use SDK 10.6 on a daily basis for work so I have to have it installed at all times. And since Xcode will remove it if put into its SDK directory on update I have instead created the old directory “/Developer/SDKs” and put the SDK there. Then I put symbolic links to the new SDKs 10.7 and 10.8.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Profiling with Instruments.app</title>
   <link href="http://nullpointer.dk/2013/02/02/profilig-with-instruments-app/"/>
   <updated>2013-02-02T22:23:13+01:00</updated>
   <id>http://nullpointer.dk/2013/02/02/profilig-with-instruments-app</id>
   <content type="html">&lt;p&gt;Profiling binaries is essential in any serious development process. Unfortunately not very many good profilers exist out there. I usually employ &lt;a href=&quot;http://valgrind.org&quot;&gt;Valgrind&lt;/a&gt; to detect memory leaks and the front-end &lt;a href=&quot;http://kcachegrind.sourceforge.net&quot;&gt;KCachegrind&lt;/a&gt; to inspect call stacks. But KCachegrind requires both X11 and KDE3 libs which I want to avoid. However, last week I discovered &lt;span style=&quot;text-decoration: underline;&quot;&gt;Instruments.app&lt;/span&gt; that comes with Xcode. It’s a great profiler with lots of different modes, like detecting memory leaks, tracking heap allocations, detection of “zombie” objects, time-based profiling, performance monitor counter (PMC) based sampling, event-based sampling, file activity, sudden termination analysis and much more. &lt;em&gt;But Instruments.app is not good at finding uninitialized variables like Valgrind is among other things - so this is not a direct substitution!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The app is located here:&lt;/p&gt;
&lt;p&gt;&lt;blockquote&gt;/Applications/Xcode.app/Contents/Applications/Instruments.app&lt;/blockquote&gt;&lt;/p&gt;

&lt;p&gt;Let’s write a little program with a memory leak that we want the program to detect for us.&lt;/p&gt;

&lt;p&gt;Save the following code to a file named “memleak.cpp”:&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;unistd.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Compile the program and run Instruments.app. When it starts select the “Leaks” template in the “Mac OS X” section and click “Choose”. A new window opens up showing two instruments; one for allocations and one for explicit memory leaks. Before one can record anything the program to profile has to be chosen in the “Choose Target” drop-down menu. Click “Record” and wait for the program to terminate (after 10 seconds) and you’ll have the following results:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/instruments-app-1.png&quot;&gt;&lt;img alt=&quot;Instruments.app showing memory leaks in memleak.cpp&quot; src=&quot;/images/instruments-app-1.png&quot; width=&quot;800&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Clicking the “Leaks” instrument you will see:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/instruments-app-2.png&quot;&gt;&lt;img alt=&quot;Instruments.app showing memory leaks in memleak.cpp&quot; src=&quot;/images/instruments-app-2.png&quot; width=&quot;800&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just to show the difference try inserting &lt;code class=&quot;highlighter-rouge&quot;&gt;delete[] test;&lt;/code&gt; after line 5 in the code, recompile and re-record the analysis. You’ll see the following:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/instruments-app-3.png&quot;&gt;&lt;img alt=&quot;Instruments.app showing no memory leaks in memleak.cpp&quot; src=&quot;/images/instruments-app-3.png&quot; width=&quot;800&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sometimes it’s necessary and insightful to gaze upon the call stacks:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/instruments-app-4.png&quot;&gt;&lt;img alt=&quot;Instruments.app showing call stack in memleak.cpp&quot; src=&quot;/images/instruments-app-4.png&quot; width=&quot;800&quot; /&gt;&lt;/a&gt;Furthermore, any system libraries and missing symbols can be hidden in the “Call Tree” sidebar for convenience. If the program was compiled with debugging symbols (use &lt;code class=&quot;highlighter-rouge&quot;&gt;-g&lt;/code&gt; with GCC or Clang, for instance) the source code along with the machine code can be shown by double-clicking an entry:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/instruments-app-5.png&quot;&gt;&lt;img alt=&quot;Instruments.app showing machine code for memleak.cpp&quot; src=&quot;/images/instruments-app-5.png&quot; width=&quot;800&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In any case, I will try using this profiler more at work and see if I find more interesting features to share.&lt;/p&gt;

</content>
 </entry>
 
 
</feed>
